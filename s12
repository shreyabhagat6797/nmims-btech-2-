'''
The central library at Mysore has a set of very interesting books and journals. 
The books are arranged in the alphabetical order of their author names. So it is very easy for the readers to search for the book.
 
The library has got a set of new books. The librarian wants to arrange them in order too. 
As some books are already arranged in the order, find a suitable way of arranging the new set of books amidst them.
 
Write a python program to arrange all the books in the alphabetical order of the author names.
sort_item_list_by_author(): Accepts the new list of books and returns it sorted in the alphabetical order of their author names.
 
add_new_items(): Accepts the new list of books, sorts it and merges it with the existing books in the library.
Hint - Use sort_item_list_by_author() method for sorting the books.
 
sort_items_by_published_year(): Sorts the list of books (item_list) based on the increasing order of their published years. 
If there are multiple items that are published in the same year, then sort them based on the alphabetical order of their author names.

Note: While sorting the author names in alphabetical order, ignore the special characters including space, if there are any.

'''


'''class Item:
    def __init__(self,item_name,author_name,published_year):
        self.__item_name=item_name
        self.__author_name=author_name
        self.__published_year=published_year

    def get_item_name(self):
        return self.__item_name

    def get_author_name(self):
        return self.__author_name

    def get_published_year(self):
        return self.__published_year

    def __str__(self):
        return "{} by {} published in {}".format(self.__item_name,self.__author_name,self.__published_year)

class Library:
    def __init__(self,item_list):
        self.__item_list=item_list

    def get_item_list(self):
        return self.__item_list

    def sort_item_list_by_author(self,new_item_list):
        new_item_list.sort(key=lambda x:''.join(e for e in x.get_author_name() if e.isalnum()))
        return new_item_list
    
    def add_new_items(self,new_item_list):
        self.__item_list.extend(new_item_list)
        self.sort_item_list_by_author(self.__item_list)

    def sort_items_by_published_year(self):
        self.sort_item_list_by_author(self.__item_list)
        self.__item_list.sort(key=lambda x:x.get_published_year())

item1=Item("A Mission In Kashmir","Andrew Whitehead",1995)
item2=Item("A Passage of India","E.M.Forster",2012)
item3=Item("A new deal for Asia","Mahathir Mohammad",1999)
item4=Item("A Voice of Freedom","Nayantara Sehgal",2001)
item5=Item("A pair of blue eyes","Thomas Hardy",1998 )

item_list=[item1,item2,item3,item4,item5]
library=Library(item_list)
print("The current items in the library are:")
for item in library.get_item_list():
    print(item)

item11=Item("Broken Wing","Sarojini Naidu",2012)
item12=Item("Guide","R.K.Narayanan",2001)
item13=Item("Indian Summers","John Mathews",2001)
item14=Item("Innocent in Death","J.D.Robb",2010)
item15=Item("Life of Pi","Yann Martel",2010 )
item16=Item("Sustainability","Johny",2016)
item17=Item("Look Ahead","E.M.Freddy",2012 )

new_item_list=[item11,item12,item13,item14,item15,item16,item17]
print()
print("The new items to be added are:")
for item in new_item_list:
    print(item)

new_item_list_sorted=library.sort_item_list_by_author(new_item_list)
print()
print("The new items after sorting based on the author name are:")
for item in new_item_list_sorted:
    print(item)

library.add_new_items(new_item_list_sorted)
print()
print("The final set of items after adding the new item list are:")
for item in library.get_item_list():
    print(item)

library.sort_items_by_published_year()
print()
print("The items sorted based on the increasing order of their published year:")
for item in library.get_item_list():
    print(item)
'''



'''
class Stack:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__top=-1
        self.__elements=[None]*self.__max_size

    def full(self):
        if self.__top==self.__max_size-1:
            return True
        else:
            return False

    def push(self,data):
        if self.full():
            print("Stack is overflow")
        else:
            self.__top+=1
            self.__elements[self.__top]=data

    def empty(self):
        if self.__top==-1:
            return True
        else:
            return False

    def pop(self):
        if self.empty():
            print("stack is underlow")
        else:
           data=self.__elements[self.__top]
           self.__top-=1
           return data

    def display(self):
        if self.empty():
            print("stack is empty") 
        else:
            index=self.__top
            while(index>=0):
                print(self.__elements[index])
                index-=1

    def get_max_size(self):
        return self.__max_size

class Queue:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*max_size
        self.__rear=-1
        self.__front=0

    def get_max_size(self):
        return self.__max_size

    def full(self):
        if self.__rear==self.__max_size-1:
            return True
        else:
            return False

    def enqueue(self,data):
        if self.full():
            print("overflow")
        else:
            self.__rear+=1
            self.__elements[self.__rear]=data

    def empty(self):
        if self.__front>self.__rear:
            return True
        else:
            return False

    def dequeue(self):
        if self.empty():
            print("underflow")
        else:
            data=self.__elements[self.__front]
            self.__front+=1
            return data

    def display(self):
        for index in range(self.__front,self.__rear+1):
            print(self.__elements[index])

flight_details=["AI890:BAN:MUM:1400","AI678:BAN:LON:1200","AI345:BAN:CAN:1410","AF780:BAN:AGF:1340","AI001:BAN:AUS:1500","AI404:BAN:NY:1220"]

passenger_details_dict=\
{"LW101":["Amanda","AI678","C7",25],"LW103":["John","AI345","A2",10],"LW107":["Alex","AI678","G5",12],\
"TW700":["Hary","AF780","D2",26],"LW167":["Kate","AI001","G3",25],"LT890":["Wade","AI404","G3",25],\
"TW677":["Preet","AF780","D3",25],"LA106":["Henry","AI001","B5",25.5],"LA104":["Ajay","AI001","A7",23],\
"LW202":["Amy","AI345","C3",24.5],"LT673":["Susan","AI404","J8",5],"TW709":["Tris","AF780","H5",22.5],\
"LA188":["Cameron","AI890","H4",22],"LA902":["Scofield","AI678","G4",23],"TW767":["Pom","AF780","H4",2],\
"LW787":["Burrows","AI890","B4",29],"LW898":["Sara","AI678","E4",14],"LW104":["Williams","AI890","C4",10] }


def find_flights(flight_time):
    l=[]
    for flight in flight_details:
       detail=flight.split(":") 
       if int(detail[3]) in range(flight_time,flight_time+201):
           l.append(flight)
    return l

def sortMethod(val):
    val1=val.split(":")
    return int(val1[3])

def sort_flight_list(flight_list):
    flight_list.sort(key=sortMethod)
    return flight_list

def get_passenger_details(flight_detail):
    l=[]
    for key,value in passenger_details_dict.items():
        if value[1] in flight_detail:
            l.append(key)
    return l

def security_check(passenger_list):
    l=[]
    for pnr in passenger_list:
        if passenger_details_dict[pnr][3] in range(0,26):
            l.append(pnr)
    return l

def sortPassengers(value):
    detail=passenger_details_dict[value]
    return detail[2]

def sort_passengers(passenger_pnr_list):
    passenger_pnr_list.sort(key=sortPassengers)
    return passenger_pnr_list

def boarding(passenger_pnr_list):
    queue=Queue(len(passenger_pnr_list))
    for passenger in passenger_pnr_list:
        queue.enqueue(passenger)
    return queue

def seating(passenger_queue):
    stack=Stack(passenger_queue.get_max_size())
    while(not passenger_queue.empty()):
        stack.push(passenger_queue.dequeue())
    return stack

print("The flight details :")
print(flight_details)
print()
print("The passenger details at the airport:")
print(passenger_details_dict)
print()
time=1130
print("Details of the flight between the timings",time,"and",time+200,"are:")
flight_list=find_flights(time)
flight_list=sort_flight_list(flight_list)
print(flight_list)
print()
print("Details of the passengers boarding the flights between the timings ",time,"and",(time+200),"are:")
print()
for i in range(0,len(flight_list)):
    flight_data=flight_list[i].split(':')
    flight_name=flight_data[0]

    passenger_pnr_list=get_passenger_details(flight_list[i])
    print("PNR details of the passengers boarding the flight",flight_name,":")
    print(passenger_pnr_list)

    print()
    updated_passenger_pnr_list=security_check(passenger_pnr_list)
    print("PNR details of the passengers of flight",flight_name," whose baggage has been cleared:")
    print(updated_passenger_pnr_list)

    sorted_passenger_pnr_list=sort_passengers(updated_passenger_pnr_list)
    print("PNR details of the passengers of flight",flight_name," sorted based on seating number:")
    print(sorted_passenger_pnr_list)

    print()
    print("The PNR details of the passengers at the queue",flight_name,":")
    passenger_queue=boarding(updated_passenger_pnr_list)
    passenger_queue.display()

    print()
    seating_stack=seating(passenger_queue)
    print("The PNR details of the passengers in the flight",flight_name,":")
    seating_stack.display()'''

'''
class Stack:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__top=-1
        self.__elements=[None]*self.__max_size

    def full(self):
        if self.__top==self.__max_size-1:
            return True
        else:
            return False

    def push(self,data):
        if self.full():
            print("Stack is overflow")
        else:
            self.__top+=1
            self.__elements[self.__top]=data

    def empty(self):
        if self.__top==-1:
            return True
        else:
            return False

    def pop(self):
        if self.empty():
            print("stack is underlow")
        else:
           data=self.__elements[self.__top]
           self.__top-=1
           return data

    def display(self):
        if self.empty():
            print("stack is empty") 
        else:
            index=self.__top
            while(index>=0):
                print(self.__elements[index])
                index-=1

    def get_max_size(self):
        return self.__max_size

def output_stack(stack1,stack2):
    l=[]
    stack3=Stack(stack1.get_max_size()+stack2.get_max_size())
    while(not stack1.empty()):
        l.append(stack1.pop())
    while(not stack2.empty()):
        l.append(stack2.pop())
    l.sort()
    for element in l:
        stack3.push(element)
    return stack3

stack1=Stack(3)
stack1.push(1)
stack1.push(2)
stack1.push(3)

stack2=Stack(3)
stack2.push(5)
stack2.push(6)
stack2.push(7)

stack1.display()
print()
stack2.display()

print()

output=output_stack(stack1,stack2)
output.display()'''

'''
Given a stack of boxes in different colors. 
Write a python function that accepts the stack of boxes and removes those boxes having color other than the primary colors (Red, Green and Blue) 
from the stack. The removed boxes should be en-queued into a new queue and returned. 
The original stack should have only the boxes having primary colors and the order must be maintained.

Perform case sensitive string comparison wherever necessary.

Note: Consider the queue to be of the same size as that of the original stack.

'''




class Stack:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__top=-1
        self.__elements=[None]*self.__max_size

    def full(self):
        if self.__top==self.__max_size-1:
            return True
        else:
            return False

    def push(self,data):
        if self.full():
            print("Stack is overflow")
        else:
            self.__top+=1
            self.__elements[self.__top]=data

    def empty(self):
        if self.__top==-1:
            return True
        else:
            return False

    def pop(self):
        if self.empty():
            print("stack is underlow")
        else:
           data=self.__elements[self.__top]
           self.__top-=1
           return data

    def display(self):
        if self.empty():
            print("stack is empty") 
        else:
            index=self.__top
            while(index>=0):
                print(self.__elements[index])
                index-=1

    def get_max_size(self):
        return self.__max_size

class Queue:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*max_size
        self.__rear=-1
        self.__front=0

    def get_max_size(self):
        return self.__max_size

    def full(self):
        if self.__rear==self.__max_size-1:
            return True
        else:
            return False

    def enqueue(self,data):
        if self.full():
            print("overflow")
        else:
            self.__rear+=1
            self.__elements[self.__rear]=data

    def empty(self):
        if self.__front>self.__rear:
            return True
        else:
            return False

    def dequeue(self):
        if self.empty():
            print("underflow")
        else:
            data=self.__elements[self.__front]
            self.__front+=1
            return data

    def display(self):
        for index in range(self.__front,self.__rear+1):
            print(self.__elements[index])

def separate_boxes(box_stack):
    box_color=["Red","Green","Blue"]
    stack=Stack(8)
    queue=Queue(8)
    while(not box_stack.empty()):
        color=box_stack.pop()
        if color.title() in box_color:
            stack.push(color)
        elif color.title() not in box_color:
            queue.enqueue(color)
    while(not stack.empty()):
        box_stack.push(stack.pop())
    return queue

box_stack=Stack(8)
box_stack.push("Red")
box_stack.push("Violet")
box_stack.push("Yellow")
box_stack.push("Green")
box_stack.push("Red")
box_stack.push("Orange")
box_stack.display()

print()

result=separate_boxes(box_stack)
result.display()
