'''
A university wants to automate their admission process. Students are admitted based on marks scored in a qualifying exam.
A student is identified by student id, age and marks in qualifying exam. Data are valid, if:

Age is greater than 20
Marks is between 0 and 100 (both inclusive)
A student qualifies for admission, if

Age and marks are valid and
Marks is 65 or more
Write a python program to represent the students seeking admission in the university.

The details of student class are given below.

Class name: Student

Attributes
(private)               student_id
                        marks
                        age

Methods
(public)

__init__()                  Create and initialize all instance variables to None

validate_marks()            If data is valid, return true. Else, return false

validate_age()

check_qualification()        Validate marks and age.
                             If valid, check if marks is 65 or more.
                             If so return true
                             Else return false
                              Else return false

setter methods                Include setter methods for all instance variables to set its values

getter methods                Include getter methods for all instance variables to get its values
'''
student_id_counter=10
class Student:
    
    def __init__(self):
        self.__student_id=None
        self.__marks=None
        self.__age=None

    def validate_marks(self):
        if self.__marks>=0 and self.__marks<=100:
            return True
        else:
            return False

    def validate_age(self):
        if self.__age>20:
            return True
        else:
            return False

    def check_qualification(self):
        if self.validate_age() and self.validate_marks():
            if self.__marks>=65:
                return True
            else:
                return False
        else:
            return False

    def set_student_id(self):
        global student_id_counter
        self.__student_id=student_id_counter
        student_id_counter+=1

    def set_marks(self,marks):
        self.__marks=marks

    def set_age(self,age):
        self.__age=age

    def get_student_id(self):
        return self.__student_id

    def get_marks(self):
        return self.__marks

    def get_age(self):
        return self.__age

s=Student()
s.set_student_id(100)
s.set_age(24)
s.set_marks(80)
print("student id is ",s.get_student_id())
print(s.get_marks())
print(s.get_age())
print(s.check_qualification())

'''
Continuing with the previous scenario, a student eligible for admission has to choose a course and pay the fees for it. 
If they have scored more than 85 marks in qualifying exam, they get 25% discount on fees.

Valid course ids and fees are given below:
course id	fees
1001	    25575.0
1002	   15500.0

Extend the program written in the previous assignment to include the above requirement.
Instance variables and methods to be included in Student class are given below.
Class name: Student
Attributes
(private)	course_id
            fees	 

Methods
(public)	
__init__()	               Create and initialize newly created instance variables also to None

choose_course(course_id)	 Accept the course_id chosen by the student.
                             •	If course_id is valid,
                              o	set attributes course_id and fees
                            o	if marks is more than 85, apply 25% discount on fees
                            o	return true
                            •	Else, return false

getter methods	             Include getter methods for newly added instance variables

'''
courses={1001:25575.0,1002:15500.0}
class Student:
    
    def __init__(self):
        self.__student_id=None
        self.__marks=None
        self.__age=None
        self.__course_id=None
        self.__fees=None

    def validate_marks(self):
        if self.__marks>=0 and self.__marks<=100:
            return True
        else:
            return False

    def validate_age(self):
        if self.__age>20:
            return True
        else:
            return False

    def check_qualification(self):
        if self.validate_age() and self.validate_marks():
            if self.__marks>=65:
                return True
            else:
                return False
        else:
            return False

    def choose_course(self,course_id):
        if course_id in courses.keys():
            self.__course_id=course_id
            if self.__marks>=85:
                self.__fees=courses[course_id]*0.75
                print("fees: ",self.__fees)
                return True
            else:
                return False
        else:
            return False


    def set_student_id(self,student_id):        
        self.__student_id=student_id
        
    def set_marks(self,marks):
        self.__marks=marks

    def set_age(self,age):
        self.__age=age

    def get_student_id(self):
        return self.__student_id

    def get_marks(self):
        return self.__marks

    def get_age(self):
        return self.__age

    def get_course_id(self):
        return self.__course_id

    def get_fees(self):
        return self.__fees


s=Student()
s.set_student_id(100)
s.set_age(24)
s.set_marks(89)
print("student id is ",s.get_student_id())
print(s.get_marks())
print(s.get_age())
if s.check_qualification():
    print("student is qualified")
    if s.choose_course(1002):
        print("course alloted")
    else:
        print("invalid course")
else:
    print("not qualified")


'''
Create a class with a couple of functions like these examples.
•	magic.replace("string", 'char1', char2') is a function that replaces all of the specified characters with another characters.
•	magic.str_length("string") is a function that returns the length of the string.
•	magic.trim(" string ") is a function that returns a string that truncates spaces at both the beginning and end.
•	magic.list_slice(list, tuple) is a function that returns the items in the list that are among the specified indexes. 
If the length of the new list is 0, return -1.

Examples
magic.replace("AzErty-QwErty", "E", "e") ➞ "Azerty-Qwerty"

magic.str_length("hello world") ➞ 11

magic.trim("      python is awesome      ") ➞ "python is awesome"

magic.list_slice([1, 2, 3, 4, 5], (2, 4)) ➞ [ 2, 3, 4 ]

'''

class Magic:
    def replace(self,string,char1,char2):
        return string.replace(char1,char2)

    def str_length(self,string):
        return len(string)

    def trim(self,string):
        return string.strip()

    def list_slice(self,lst,tple):
        return lst[slice(tple[0]-1,tple[1])]

magic=Magic()
print(magic.replace("AzErty-QwErty", "E", "e"))
print(magic.str_length("hello world"))
print(magic.trim("      python is awesome      "))
print(magic.list_slice([1, 2, 3, 4, 5], (2, 4)))

'''
Create a Person class which will have three properties:
•	Name
•	List of foods they like
•	List of foods they hate
In this class, create the method taste():
•	It will take in a food name as a string.
•	Return {person_name} eats the {food_name}.
•	If the food is in the person's like list, add 'and loves it!' to the end.
•	If it is in the person's hate list, add 'and hates it!' to the end.
•	If it is in neither list, simply add an exclamation mark to the end.
Examples
p1 = Person("Sam", ["ice cream"], ["carrots"])
p1.taste("ice cream") ➞ "Sam eats the ice cream and loves it!"

p1.taste("cheese") ➞ "Sam eats the cheese!"

p1.taste("carrots") ➞ "Sam eats the carrots and hates it!"
Notes
•	A person can have an empty list for foods they hate and/or love.

'''

class Person:
    def __init__(self,name,likes,hates):
        self.name=name
        self.likes=likes
        self.hates=hates

    def taste(self,food):
        if food in self.likes:
           add=" and loves it"
        elif food in self.hates:
            add=" and hates it"
        else:
            add=""
        return self.name+" eats the "+food+add+"!" 

p=Person("Sam", ["ice cream"], ["carrots"])
print(p.taste("ice cream") )

print(p.taste("cheese") )

print(p.taste("carrots"))

'''
Royal Orchid is a florist. They want to be alerted when stock of a flower goes below a particular level. 
The flowers are identified using name, price per kg and stock available (in kgs).
Write a Python program to implement the above requirement.
Details of Flower class are given below:
Class name: Flower

Attributes
(private)                  flower_name
                           price_per_kg
                           stock_available	 
Methods
(public)	

__init__()	                        Create and initialize all instance variables to None

validate_flower()	                Return true, if flower name is valid. Else, return false
                                     (Refer table for valid flower names)

validate_stock(required_quantity)	Accept the quantity required. Return true, if stock is available.
                                      Else return false.

sell_flower(required_quantity)	    Accept the quantity required.
                                    Validate flower name and stock.
                                    If both are valid, update stock available based on the quantity required

check_level()	                    Check if available stock is below the order level
                                    If so, return true. Else, return false
                                    (Refer table for order level of each flower)

setter methods	                    Include setter methods for all instance variables to set its values
getter methods	                    Include getter methods for all instance variables to get its values
 
 
Flower Name	  Level(in Kgs)
Orchid	        15
Rose	        25
Jasmine	        40
Note: Perform case insensitive string comparison
Represent few flowers, initialize instance variables using setter methods, invoke appropriate methods and test your program.

'''

'''flowers=["Orchid","Rose","Jasmine"]
levels=[15,25,40]

class Flower:
    def __init__(self):
        self.__flower_name=None
        self.__price_per_kg=None
        self.__stock_available=None

    def validate_flower(self):
        if self.__flower_name in flowers:
            return True
        else:
            return False

    def valiadte_stock(self,required_quantity):
        if self.__stock_available>=required_quantity:
            return True
        else:
            return False

    def sell_flower(self,required_quantity):
        if self.validate_flower() and self.valiadte_stock(required_quantity):
            self.__stock_available-=required_quantity
            return True#print(self.__stock_available)
        else:
            return False

    def check_level(self):
        if self.validate_flower():
            flower_level=levels[flowers.index(self.__flower_name)]
            if self.__stock_available<flower_level:
                return True
            else:
                return False
        else:
            return False

    def set_flower_name(self,flower_name):
        self.__flower_name=flower_name

    def set_price_per_kg(self,price_per_kg):
        self.__price_per_kg=price_per_kg

    def set_stock_available(self,stock_available):
        self.__stock_available=stock_available

    def get_flower_name(self):
        return self.__flower_name

    def get_price_per_kg(self):
        return self.__price_per_kg

    def get_stock_available(self):
        return self.__stock_available

f=Flower()
f.set_flower_name("orchid")
f.set_price_per_kg(200)
f.set_stock_available(12)
print(f.get_flower_name())
print(f.get_price_per_kg())
print(f.get_stock_available())
print(f.sell_flower(10))
print(f.check_level())'''


'''
Care hospital wants to calculate the bill amount to be paid by patients visiting the hospital. 
Bill amount includes consultation fees and price of medicines purchased from their pharmacy.

Write a Python program to implement the class diagram given below.

                                                                            
Method description:

calculate_bill_amount(consultation_fees, quantity_list, price_list): 
Accept consultation_fees, quantity_list (quantities of medicines purchased) and price_list (price per quantity of medicines purchased)

Calculate total bill amount to be paid by the patient. Bill amount includes consultation fees and price of medicines
Initialize attribute, bill_amount with the total bill amount
Note: quantity_list and price_list have one-to-one correspondence. 
Quantity and price per quantity of 1st medicine purchased by the patient is present at 0th index of both lists, 
2nd medicine is present at 1st index and so on.

For testing:

Create objects of Bill class
Invoke calculate_bill_amount(consultation_fees, quantity_list, price_list) method on Bill object by passing consultation fees, 
quantity list and price list
Display bill id, patient name and bill amount

'''    

class Bill:
    def __init__(self,patient_name,bill_id):
        self.__patient_name=patient_name
        self.__bill_id=bill_id
        self.__bill_amount=0

    def get_patient_name(self):
        return self.__patient_name

    def get_bill_id(self):
        return self.__bill_id

    def get_bill_amount(self):
        return self.__bill_amount

    def calculate_bill(self,consultation_fees, quantity_list, price_list):
        for i in range(len(quantity_list)):
            self.__bill_amount+=(quantity_list[i]*price_list[i])
        self.__bill_amount+=consultation_fees

b=Bill("ABC",10)
b.calculate_bill(200,[2,3],[50,60])
print(b.get_patient_name())
print(b.get_bill_id())
print(b.get_bill_amount())

'''
TechWorld, a technology training center, wants to allocate courses for instructors.
An instructor is identified by name, technology skills, experience and average feedback.
An instructor is allocated a course, if he/she satisfies the below two conditions:
•	eligibility criteria:
•	if experience is more than 3 years, average feedback should be 4.5 or more
•	if experience is 3 years or less, average feedback should be 4 or more
•	he/she should posses the technology skill for the course
Identify the class name and attributes from the list of options below to represent instructors.
•	check_eligibility()
•	avg_feedback
•	experience
•	instructor_name
•	allocate_course()
•	allocate_course(technolody)
•	__init__()
•	Instructor
•	calculate_avg_feedback()
•	technology_skill
Write a Python program to implement the class chosen with its attributes and methods.
Note:
1.	Consider all instance variables to be private and methods to be public
2.	An instructor may have multiple technology skills, so consider instance variable, technology_skill to be a list
3.	check_eligibility(): Return true if eligibility criteria is satisfied by the instructor. Else, return false
4.	allocate_course(technology): Return true if the course which requires the given technology can be allocated to the instructor. 
    Else, return false
5.	Perform case sensitive string comparison
Represent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.

'''

#polymorphism
'''same function but used in different types'''
condidtion of occurrence in different forms refers to the use of single type entity to represent different types in different scenarios

print(len("python"))
print(len(["python","java","c"]))
print(len({"name":"python","language":"moderate"}))


num1=4
num2=5
print(num1+num2)

str1="python"
str2="language"
print(str1+" "+str2)


class Cat:
    def __init__(self,name,age):
        self.name=name
        self.age=age

    def info(self):
        print(f"I am cat.My name is {self.name}.I am {self.age} years old")

class Dog:
    def __init__(self,name,age):
        self.name=name
        self.age=age

    def info(self):
        print(f"I am dog.My name is {self.name}.I am {self.age} years old")

c=Cat("abc",2)
d=Dog("xyz",4)

for animal in (c,d):
    animal.info()
    

#encapsulation

Describes the idea of  wrapping data and methods that works on data within one unit
It puts restructions on accessing the variables & methods & can prevent accidental modification

private: objct's variable can only be changed by an oject's method()

protected: calling protected members of base class

class Computer:
    def __init__(self):
        self.__price=500

    def sell(self):
        print("sellinng price={}".format(self.__price))

    def set_price(self,price):
        self.__price=price

    def __func(self):
        print("it is private method")

c=Computer()
c.sell()

c.__price=200
c.sell()

c.set_price(200)
c.sell()

c._Computer__func()   #invoking private method ..... object._classnameprivatemethodname 
