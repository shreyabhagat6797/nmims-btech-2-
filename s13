'''
The International Cricket Council (ICC) wanted to do some analysis of international cricket matches held in last 10 years.

Given a list containing match details as shown below:
[match_detail1,match_detail2……]
Format of each match_detail in the list is as shown below:
country_name : championship_name : total_number_of_matches_played : number_of_matches_won
Example: AUS:CHAM:5:2 means Australia has participated in Champions Trophy 5 times and have won 2 times.
Write a python program which performs the following:
find_matches (country_name): Accepts the country_name and returns the list of details of matches played by that country.

max_wins(): Returns a dictionary containing the championship name as the key and 
            the list of country/countries which have won the maximum number of matches in that championship as the value.

find_winner(country1,country2): Accepts name of two countries and 
                             returns the country name which has won more number of matches in all championships. 
                             If both have won equal number of matches, return "Tie".

Perform case sensitive string comparison wherever necessary.
match_list – ['ENG:WOR:2:0', 'AUS:CHAM:5:2', 'PAK:T20:5:1', 'AUS:WOR:2:1', 'SA:T20:5:0', 'IND:T20:5:3', 'PAK:WOR:2:0', 
'SA:WOR:2:0', 'SA:CHAM:5:1', 'IND:WOR:2:1']

Sample Input                                                   Expected Output
find_matches ("AUS")                                        ['AUS':CHAM:5:2','AUS:WOR:2:1']
max_wins()                                            {'WOR': ['AUS', 'IND'], 'CHAM': ['AUS'], 'T20': ['IND']}
find_winner("AUS","IND")                                           IND

 
'''

def find_matches(country_name):
    l=[]
    for match in match_list:
        detail=match.split(":")
        if detail[0]==country_name:
            l.append(match)
    return l

def max_wins():
    dictionary={}
    for match in match_list:
        detail=match.split(":")
        if detail[1] not in dictionary.keys():
            dictionary[detail[1]]=None
        if dictionary[detail[1]]==None:
            dictionary[detail[1]]=int(detail[3])
        elif dictionary[detail[1]]>=0:
            if dictionary[detail[1]]<int(detail[3]):
                dictionary[detail[1]]=int(detail[3])
    temp=dictionary.copy()
    for key,values in dictionary.items():
        dictionary[key]=[]
    for match in match_list:
        detail=match.split(":")
        if int(detail[3])==temp[detail[1]]:
            dictionary[detail[1]].append(detail[0])
    return dictionary
    
match_list = ['ENG:WOR:2:0', 'AUS:CHAM:5:2', 'PAK:T20:5:1', 'AUS:WOR:2:1', 'SA:T20:5:0', 'IND:T20:5:3', 'PAK:WOR:2:0', 
'SA:WOR:2:0', 'SA:CHAM:5:1', 'IND:WOR:2:1']

def find_winner(country1,country2):
    count1,count2=0,0
    for match in match_list:
        detail=match.split(":")
        if detail[0]==country1:
            count1+=int(detail[3])
        if detail[0]==country2:
            count2+=int(detail[3])
    if count1==count2:
        return "tie"
    elif count1>count2:
        return country1
    else:
        return country2

match_list = ['ENG:WOR:2:0', 'AUS:CHAM:5:2', 'PAK:T20:5:1', 'AUS:WOR:2:1', 'SA:T20:5:0', 'IND:T20:5:3', 'PAK:WOR:2:0', 
'SA:WOR:2:0', 'SA:CHAM:5:1', 'IND:WOR:2:1']

print(find_matches("AUS"))
print()
print(max_wins())
print()
print(find_winner("AUS","IND"))

'''
Mary is a kindergarten teacher. She has given a task to the children after teaching them a list of words. 
The task is to find the unknown words (other than the words they already know) from the given text. 
Write a python function which accepts the text and the known list of words and returns the set of unknown words found.

Return -1 if there are no unknown words.


Sample Input                                                      Expected Output

Text: "the sun rises in the east"
Vocabulary: ["sun","in","east","doctor","day"]                    {'rises', 'the'}
'''

def find_unknown_words(text,vocabulary):
    l=[]
    status=0
    text_list=text.split(" ")
    for each_text in text_list:
        if each_text not in vocabulary:
           if "." in each_text:
               each_text=each_text.replace("."," ")
           l.append(each_text)
           status=1
    if status:
        return set(l)
    else:
        return -1
    
text="the sun rises in the east"
vocabulary= ["sun","in","east","doctor","day"]
unknown_words=find_unknown_words(text,vocabulary)
print(unknown_words)


'''
Given a list of numbers sorted in ascending order. Write a python function which searches for a given number in the list. 
The given number may occur more than once in the list. 
The function should return the index position at which the last occurrence of the given element is found. 
If the number is not found, return -1.
'''




def last_instance(num_list,key):
    count=0
    index=0

    if key in num_list:
        index=num_list.index(key)
    if index:
        count=num_list.count(key)
    return index+count-1

num_list=[1,1,2,3,3,3,4,5,5,5]
key=5
result=last_instance(num_list,key)
if result!=-1:
    print(result)
else:
    print("number not found")




'''
Alice, a school teacher, has decided to take her 20 students to an exhibition. 
She got the tickets a week before (T1 to T20) and she was informed 
that students will be allowed only in groups of 10 inside the exhibition hall.
 
On the day of exhibition, few students did not turn up. 
So the teacher followed the below strategy to identify the first 10 students who were sent as group-1.
 
Suppose the ticket id of the students who turned up on that day is as follows:
T20, T5, T10, T1, T2, T8, T16, T17, T9, T4, T12, T13, T18
She made the students stand in a line in increasing order of their ticket numbers. 
They were asked to leave a vacant position, in case a student has not turned up.
Ex: T1, T2, V, T4, T5, V, V, T8, T9, T10, V, T12, T13, V, V, T16, T17, T18, V, T20 where V - indicates vacant position.
Grouped them into 2 groups of 10 each including vacant positions.
Ex: Group – 1 (T1, T2, V, T4, T5, V, V, T8, T9, T10), Group – 2 (V, T12, T13, V, V, T16, T17, T18, V, T20)
Filled the vacant positions with the students from the next group as shown in the example below.
Ex: Group – 1 (T1, T2, T12, T4, T5, T13, T16, T8, T9, T10) Group -2 (T17, T18, T20)
Write a python function which accepts the unsorted ticket id list 
and returns the list of ticket ids of the ten students who were finally sent inside as part of Group-1.
 
Sample Input	                                                           Expected Output
['T20','T5','T10','T1','T2','T8','T16','T17',
'T9','T4','T12','T13', 'T18']	                          ['T1', 'T2', 'T12', 'T4', 'T5', 'T13', 'T16', 'T8', 'T9', 'T10']

'''

def arrange_tickets(ticket_list):
    new_list=[]
    for i in range(1,21): 
        if "T"+str(i) in ticket_list:
            new_list.append("T"+str(i))
        else:
            if i<=10:
                new_list.append("V")
    print(new_list)
    counter=10
    for index,ticket in enumerate(new_list):
        if ticket=="V" and index<=10:
            new_list[index]=new_list[counter]
            counter+=1
    return new_list[:10]

ticket_list=['T20','T5','T10','T1','T2','T8','T16','T17','T9','T4','T12','T13', 'T18']	

print("ticket ids of all the present students:")
print(ticket_list)

group1=arrange_tickets(ticket_list)
print()
print("group 1 ids:")
print(group1)
