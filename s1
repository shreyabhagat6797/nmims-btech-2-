#oop
'''
•	A class is a user-defined blueprint or prototype from which objects are created.
•	Class Definition Syntax:
class ClassName:
# Statement-1
.
.
# Statement-N
•	An Object is an instance of a Class. 
•	self
Class methods must have an extra first parameter in the method definition. 
'''

class Python:   #class creation
    pass 

p1=Python()    #object creation  or instantiating a class
p2=Python()

#self

#constructors or init method
'''
•	__init__ method is used to initializing the object’s state.
•	Constructors are used to initializing the object’s state.
•	Types of constructors :
1.	default constructor 
2.	parameterized constructor 
'''

def __init__(self):
    pass



#example
class Dog:
    animal="dog" #class variable 
    def __init__(self,breed,color):
        self.breed=breed  #instance variables 
        self.color=color

D1=Dog("Pug","brown")
D2=Dog("Bulldog","white")

print("d1 is:",D1.animal)
print("d1 is:",D1.breed)
print("d1 is:",D1.color)

print("d2 is:",D2.animal)
print("d2 is:",D2.breed)
print("d2 is:",D2.color)

#destructors
#destructors

'''
•	Destructors are called when an object gets destroyed. 
'''


def __del__(self):
    pass'''

class Employee:
    def __init__(self):
        print("emp is created")

    def __del__(self):
        print("destroys emp")

e=Employee()
del e

###
class Dog:
    animal="dog" #class variable 
    def __init__(self,breed,color):
        self.breed=breed  #instance variables 
        self.color=color
        self.tail=None

    def set_tail(self,tail):   #setter methods used to set the values 
        self.tail=tail

    def get_tail(self):
        return self.tail

    def set_legs(self,legs):
        self.legs=legs

    def get_legs(self):     #getter methods used to access the values and display them
        return self.legs
    
    def get_breed(self):
        return self.breed

D1=Dog("Pug","brown")
D2=Dog("Bulldog","white")

print("d1 is:",D1.animal)
print("d1 is:",D1.breed)
print("d1 is:",D1.color)

print("d2 is:",D2.animal)
print("d2 is:",D2.breed)


D2.set_legs(4)
print(D2.get_legs())

print(D1.get_breed())


'''
Create a class that takes the following four arguments for a particular football player:
•	name
•	age
•	height
•	weight
Also, create three functions for the class that returns the following strings:
•	get_age() returns "name is age age"
•	get_height() returns "name is heightcm"
•	get_weight() returns "name weighs weightkg"
Examples
 p1 = player("David Jones", 25, 175, 75)

 p1.get_age() ➞ "David Jones is age 25"
 p1.get_height() ➞ "David Jones is 175cm"
 p1.get_weight() ➞ "David Jones weighs 75kg"
Notes
name will be passed in as a string and age, height, weight will be integers.

'''


class Player:
    def __init__(self,name,age,height,weight):
        self.name=name
        self.age=age
        self.height=height
        self.weight=weight

    def get_age(self):
        return '{} is age {}'.format(self.name,self.age)

    def get_height(self):
        return '{} is  {}cm'.format(self.name,self.height)

    def get_weight(self):
        return '{} is  {}kg'.format(self.name,self.weight)

p=Player("David Jones", 25, 175, 75)
print(p.get_age())
print(p.get_height())
print(p.get_weight())


'''
Create a class Smoothie and do the following:
•	Create an instance attribute called ingredients.
•	Create a get_cost method which calculates the total cost of the ingredients used to make the smoothie.
•	Create a get_price method which returns the number from get_cost plus the number from get_cost multiplied by 1.5. 
Round to two decimal places.
•	Create a get_name method which gets the ingredients and puts them in alphabetical order into a nice descriptive sentence. 
If there are multiple ingredients, add the word "Fusion" to the end but otherwise, add "Smoothie". Remember to change "-berries" to "-berry". 
See the examples below.
Ingredient	    Price
Strawberries	$1.50
Banana	        $0.50
Mango	        $2.50
Blueberries	    $1.00
Raspberries	    $1.00
Apple	        $1.75
Pineapple	    $3.50
Examples
s2 = Smoothie(["Raspberries", "Strawberries", "Blueberries"])

s2.ingredients ➞ ["Raspberries", "Strawberries", "Blueberries"]

s2.get_cost() ➞ "$3.50"

s2.get_price() ➞ "$8.75"

s2.get_name() ➞ "Blueberry Raspberry Strawberry Fusion"
'''

prices={'Strawberries':	'$1.50',
'Banana':'$0.50',
'Mango'	:'$2.50',
'Blueberries':'$1.00',
'Raspberries':  '$1.00',
'Apple' :'$1.75',
'Pineapple'	:'$3.50'}

class Smoothie:
    def __init__(self,lst_items):
        self.ingredients=lst_items[:]

    def __get_cost__(self):
        return sum(float(prices[item][1:]) for item in self.ingredients)

    def get_cost(self):
        return '${:2f}'.format(self.__get_cost__())

    def get_price(self):
        return '${:.2f}'.format(round(self.__get_cost__()*1.5,2))

    def get_name(self):
        return (' '.join(sorted(self.ingredients)).replace("berries","berry")+("Smoothie" if len(self.ingredients)==1 else "Fusion"))

s=Smoothie(["Raspberries", "Strawberries", "Blueberries"])
print(s.ingredients)
print(s.get_cost())
print(s.get_price())
print(s.get_name())


'''
WeCare insurance company wants to calculate premium of vehicles.
Vehicles are of two types – "Two Wheeler" and "Four Wheeler". Each vehicle is identified by vehicle id, type, cost and premium amount.
Premium amount is 2% of the vehicle cost for two wheelers and 6% of the vehicle cost for four wheelers. 
Calculate the premium amount and display the vehicle details.
Identify the class name and attributes to represent vehicles. 
•	calculate_premium()
•	vehicle_cost
•	TwoWheeler
•	vehicle_type
•	vehicle_id
•	Vehicle
•	premium_amount
•	FourWheeler
•	calculate_vehicle_cost()
•	__init__()
•	display_vehicle_details()
Write a Python program to implement the class chosen with its attributes and methods.
Note:
1.	Consider all instance variables to be private and methods to be public
2.	Include getter and setter methods for all instance variables
3.	Display appropriate error message, if the vehicle type is invalid
4.	Perform case sensitive string comparison
Represent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.

'''

class Vehicle:
    def __init__(self):
        self.__vehicle_id=None
        self.__vehicle_cost=None
        self.__vehicle_type=None
        self.__premium_amount=None

    def set_vehicle_id(self,vehicle_id):
        self.__vehicle_id=vehicle_id

    def set_vehicle_cost(self,vehicle_cost):
        self.__vehicle_cost=vehicle_cost

    def set_vehicle_type(self,vehicle_type):
        if check_type(vehicle_type):
            self.__vehicle_type=vehicle_type
        else:
            return "invalid vehicle type"

    def get_vehicle_id(self):
        return self.__vehicle_id

    def get_vehicle_cost(self):
        return self.__vehicle_cost

    def get_vehicle_type(self):
        return self.__vehicle_type
    
    def get_premium_amount(self):
        return self.__premium_amount

    def calculate_premium_amount(self):
        if self.__vehicle_type=="TwoWheeler":
            self.__premium_amount=self.__vehicle_cost*0.98
        elif self.__vehicle_type=="FourWheeler":
            self.__premium_amount=self.__vehicle_cost*0.94
        else:
            print("invalid vehicle type")

    def display_details(self):
        print(self.__vehicle_id)
        print(self.__vehicle_cost)


def check_type(type):
    vehicle_type=["TwoWheeler","FourWheeler"]
    if type not in vehicle_type:
        return 0
    return 1

v=Vehicle()
v.set_vehicle_id(100)
v.set_vehicle_type("TwoWheeler")
v.set_vehicle_cost(105000)
v.display_details()
print(v.get_vehicle_type())
v.calculate_premium_amount()
print(v.get_premium_amount())


'''
Create a Person class which will have three properties:
•	Name
•	List of foods they like
•	List of foods they hate
In this class, create the method taste():
•	It will take in a food name as a string.
•	Return {person_name} eats the {food_name}.
•	If the food is in the person's like list, add 'and loves it!' to the end.
•	If it is in the person's hate list, add 'and hates it!' to the end.
•	If it is in neither list, simply add an exclamation mark to the end.
Examples
p1 = Person("Sam", ["ice cream"], ["carrots"])
p1.taste("ice cream") ➞ "Sam eats the ice cream and loves it!"

p1.taste("cheese") ➞ "Sam eats the cheese!"

p1.taste("carrots") ➞ "Sam eats the carrots and hates it!"
Notes
•	A person can have an empty list for foods they hate and/or love.

'''
