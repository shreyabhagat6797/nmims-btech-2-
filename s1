#oop
'''
•	A class is a user-defined blueprint or prototype from which objects are created.
•	Class Definition Syntax:
class ClassName:
# Statement-1
.
.
# Statement-N
•	An Object is an instance of a Class. 
•	self
Class methods must have an extra first parameter in the method definition. 
'''

class Python:   #class creation
    pass 

p1=Python()    #object creation  or instantiating a class
p2=Python()

#self

#constructors or init method
'''
•	__init__ method is used to initializing the object’s state.
•	Constructors are used to initializing the object’s state.
•	Types of constructors :
1.	default constructor 
2.	parameterized constructor 
'''

def __init__(self):
    pass



#example
class Dog:
    animal="dog" #class variable 
    def __init__(self,breed,color):
        self.breed=breed  #instance variables 
        self.color=color

D1=Dog("Pug","brown")
D2=Dog("Bulldog","white")

print("d1 is:",D1.animal)
print("d1 is:",D1.breed)
print("d1 is:",D1.color)

print("d2 is:",D2.animal)
print("d2 is:",D2.breed)
print("d2 is:",D2.color)

#destructors
#destructors

'''
•	Destructors are called when an object gets destroyed. 
'''


def __del__(self):
    pass'''

class Employee:
    def __init__(self):
        print("emp is created")

    def __del__(self):
        print("destroys emp")

e=Employee()
del e

###
class Dog:
    animal="dog" #class variable 
    def __init__(self,breed,color):
        self.breed=breed  #instance variables 
        self.color=color
        self.tail=None

    def set_tail(self,tail):   #setter methods used to set the values 
        self.tail=tail

    def get_tail(self):
        return self.tail

    def set_legs(self,legs):
        self.legs=legs

    def get_legs(self):     #getter methods used to access the values and display them
        return self.legs
    
    def get_breed(self):
        return self.breed

D1=Dog("Pug","brown")
D2=Dog("Bulldog","white")

print("d1 is:",D1.animal)
print("d1 is:",D1.breed)
print("d1 is:",D1.color)

print("d2 is:",D2.animal)
print("d2 is:",D2.breed)


D2.set_legs(4)
print(D2.get_legs())

print(D1.get_breed())


'''
Create a class that takes the following four arguments for a particular football player:
•	name
•	age
•	height
•	weight
Also, create three functions for the class that returns the following strings:
•	get_age() returns "name is age age"
•	get_height() returns "name is heightcm"
•	get_weight() returns "name weighs weightkg"
Examples
 p1 = player("David Jones", 25, 175, 75)

 p1.get_age() ➞ "David Jones is age 25"
 p1.get_height() ➞ "David Jones is 175cm"
 p1.get_weight() ➞ "David Jones weighs 75kg"
Notes
name will be passed in as a string and age, height, weight will be integers.

'''


class Player:
    def __init__(self,name,age,height,weight):
        self.name=name
        self.age=age
        self.height=height
        self.weight=weight

    def get_age(self):
        return '{} is age {}'.format(self.name,self.age)

    def get_height(self):
        return '{} is  {}cm'.format(self.name,self.height)

    def get_weight(self):
        return '{} is  {}kg'.format(self.name,self.weight)

p=Player("David Jones", 25, 175, 75)
print(p.get_age())
print(p.get_height())
print(p.get_weight())
